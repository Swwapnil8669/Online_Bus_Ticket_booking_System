#Logic1: For ac, non ac, sleeper and non sleeper bus types.
        Make a table with four such combinations and assign a value for each combination.
        id	AC_TYPE	SLEEPER_TYPE
        1	AC	SLEEPER
        2	NON AC	SLEEPER
        3	AC	NON SLEEPER
        4	NON AC	NON SLEEPER
=======================================================
#Logic2: At the time of operator registration we will make the operator slect cities in which he would be providing services, 
and then accordingly for every selected city, the operator will input the location from where he would have his boarding point for the selected city. 
Entered location will be same boarding as well as drop off location for considered operator.
========================================================
#Logic3: Regarding bus fare. The operator will enter the fare of bus while scheduling a bus.


========================================================
#Logic4: Operator and businness location association.
        Operator-Business-Location Table is a collection of Embeddable businnessLocation in Operator Class.
        @Entity
        class Operator{
                id;
                @ElemenetColletion
                List<BusinessLocations> businnessLocation = new ArrayList<>();
        }
        ----
        @Embeddable
        class BusinessLocation{
                private String city;
                private String address;
        }
========================================================
#Logic5: Seat Allocation Logic
        `Seat Allocation` table is a collection inside `bus` table having no identity of its own.
        `Seat Allocation` table is a boolean table with no PK.
        ElemenetColletion
        `Seat Allocation` has RTO registration no as "FK*"

========================================================
#Logic6: Payment+Booking Logic
        -Bus booking table is mega table.
        -User is redirected to a bank gateway which sends a transaction id and payment status wthr the payment is succesfull or not to server and this is reflected on front-end.

========================================================
#Logic7: Admin logic:  In ER just add an 'isAdmin' boolean in our User table
         What can admin see?
        -Operator delete/approve/reject
        -Users
        -Buses

========================================================
#Logic8: Spring boot version selected; 3.0.2

========================================================
#Logic8: Operator Business Location api used to fetch city(Pune) name and area(Wakad) name: `https://api.postalpincode.in/pincode/${pincode}`
        eg: `https://api.postalpincode.in/pincode/411057`
        -Structure of response:  {
                "Name": "Wakad",
                "Circle": "Maharashtra",
                "District": "Pune",
                "Division": "Pune City East",
                "Region": "Pune",
                "Block": "Pune City",
                "State": "Maharashtra",
                "Country": "India",
                "Pincode": "411057"
            }

========================================================
#Logic9: FrontEnd components removed from template: 
        -Reuslt filter sorting and slider
